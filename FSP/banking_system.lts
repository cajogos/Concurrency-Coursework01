const MAX = 5 // Maximum amount - to avoid too many states
const T_VALUE = 1 // Transaction value
range BAL_RANGE = 0..MAX

// Bank Account Process - It contains a BALANCE process that holds its current balance
BANK_ACCOUNT(BAL_START = 3) = BALANCE[BAL_START], BALANCE[cur : BAL_RANGE] = (
    acquire -> read[cur] -> write[new : BAL_RANGE] -> release -> BALANCE[new]
).

// Student Process - Can both withdraw or deposit
STUDENT = (
    acquire -> read[cur :  BAL_RANGE] -> (
          when(cur > T_VALUE) withdraw -> write[cur - T_VALUE] -> release -> STUDENT
        | when((cur + T_VALUE) <= MAX) deposit -> write[cur + T_VALUE] -> release -> STUDENT
        | write[cur] -> release -> STUDENT
    )
).

// Loan Company Process - Can only deposit
LOAN_COMPANY = (
    acquire -> read[cur : BAL_RANGE] -> (
          when((cur + T_VALUE) <= MAX) deposit -> write[cur + T_VALUE] -> release -> LOAN_COMPANY
        | write[cur] -> release -> LOAN_COMPANY
    )
).

// University Process - Can only withdraw
UNIVERSITY = (
    acquire -> read[cur : BAL_RANGE] -> (
          when(cur > T_VALUE) withdraw -> write[cur - T_VALUE] -> release -> UNIVERSITY
        | write[cur] -> release -> UNIVERSITY
    )
).

// The sharing of the BANK_ACCOUNT process
|| ACCOUNT_SHARE = (
       student : STUDENT
    || loanCompany : LOAN_COMPANY
    || university : UNIVERSITY
    || { student, loanCompany, university } :: BANK_ACCOUNT(3)
).

// Banking System with both accounts
set StudentAccounts = { rikAcc, sueAcc }
|| BANK_SYSTEM = (
    StudentAccounts : ACCOUNT_SHARE
).